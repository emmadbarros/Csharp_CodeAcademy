using System;
namespace AppInterfaces
{
    public class PasswordManager : IDisplayable, IResetable
    {
        //FIELD(s)
        //auto-generated by compiler with the auto-implemented properties
        private string _password;

        //PROPERTIE(s)
        private string Password
        {
            get
            {
                return _password;
            }
            set
            {
                if(value.Length < 8)
                {
                    throw new InvalidDataException("Password length must be 8 character or more.");
                }
                _password = value;
            }
        }

        public bool Hidden
        { get; private set; }

        public string HeaderSymbol => "=";



        //CONSTRUCTOR(s)
        //no parameterless constructor available!
        public PasswordManager(string password, bool hidden)
        {
            //no strong verif in setter for password - not goal of this exercice
            Password = password; //InvalidDataException exc
            Hidden = hidden;
        }


        //METHOD(s)
        public void Display()
        {
            Console.WriteLine("PASSWORD");
            for (int x = 0; x < 10; x++)
            {
                Console.Write(HeaderSymbol);
                if (x == 9)
                {
                    Console.WriteLine();
                }
            }
            if (Hidden)
            {
                Console.WriteLine("***");
            }
            else
            {
                Console.WriteLine(Password);
            }
        }

        public void Reset()
        {
            //This is not a good design since Reseting will throw InvalidDataException - use ChangePassword method instead
            Password = ""; //InvalidDataException exc
            Hidden = false;
        }

        public bool ChangePassword(string currentPassword, string newPassword)
        {
            try
            {
                if (currentPassword.Equals(Password))
                {
                    Password = newPassword; //InvalidDataException exc
                    return true;
                }
                return false;
            } catch(InvalidDataException exc)
            {
                return false;
            }
        }
    }
}
